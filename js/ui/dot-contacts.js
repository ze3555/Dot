// –ö–∞–ø—Å—É–ª–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ #dot-core
// –í–∞–ª–∏–¥–∞—Ü–∏—è username: a-z 0-9 _ –¥–ª–∏–Ω–∞ 3..20

const RE_USERNAME = /^[a-z0-9_]{3,20}$/;

export function renderContacts({ onBack } = {}) {
  const root = document.createElement("div");
  root.className = "dot-contacts-wrap";

  // Left icon (search). –ö–ª–∏–∫ –ø–æ –Ω–µ–º—É –º–æ–∂–Ω–æ —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å –∫–∞–∫ "–Ω–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
  const btnSearch = document.createElement("button");
  btnSearch.type = "button";
  btnSearch.className = "dot-contacts-btn";
  btnSearch.dataset.act = "search";
  btnSearch.setAttribute("aria-label", "Search");
  btnSearch.textContent = "üîç";

  // Input
  const input = document.createElement("input");
  input.className = "dot-contacts-input";
  input.type = "text";
  input.placeholder = "Search or add by username‚Ä¶";
  input.autocomplete = "off";
  input.inputMode = "text";
  input.enterKeyHint = "search";

  // Add button
  const btnAdd = document.createElement("button");
  btnAdd.type = "button";
  btnAdd.className = "dot-contacts-btn";
  btnAdd.dataset.act = "add";
  btnAdd.setAttribute("aria-label", "Add contact");
  btnAdd.textContent = "Ôºã";
  btnAdd.disabled = true;

  // Optional helper line (errors / tips)
  const helper = document.createElement("div");
  helper.className = "dot-contacts-helper";
  helper.hidden = true;

  // Layout
  root.append(btnSearch, input, btnAdd);
  // helper –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∂–µ –∫–∞–ø—Å—É–ª—ã; –µ—Å–ª–∏ –Ω–∞–¥–æ –≤–Ω—É—Ç—Ä–∏ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
  // root.append(helper);

  // Stop closing on outside-click (handled –≤ dot.js –¥–ª—è –Ω–µ-idle —Å–æ—Å—Ç–æ—è–Ω–∏–π)
  root.addEventListener("click", (e) => e.stopPropagation());

  // Autofocus –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  queueMicrotask(() => input.focus());

  // Enable/disable "add" –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  function syncValidity() {
    const value = input.value.trim().toLowerCase();
    const ok = RE_USERNAME.test(value);
    btnAdd.disabled = !ok;
    helper.hidden = ok || !value;
    if (!ok && value) {
      helper.textContent = "Username: a‚Äìz, 0‚Äì9, _ (3‚Äì20)";
    }
  }

  input.addEventListener("input", syncValidity);
  input.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      e.stopPropagation();
      // –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω onBack)
      onBack?.();
    }
    if (e.key === "Enter") {
      e.preventDefault();
      if (!btnAdd.disabled) triggerAdd();
    }
  });

  // Actions
  btnSearch.addEventListener("click", () => {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏—á–µ–≥–æ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–∫–æ–Ω–∫–∞.
    // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å "–Ω–∞–∑–∞–¥" –Ω–∞ —Ç–∞–ø –ø–æ –ª—É–ø–µ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
    // onBack?.();
    input.focus();
  });

  btnAdd.addEventListener("click", triggerAdd);

  function triggerAdd() {
    const username = input.value.trim().toLowerCase();
    if (!RE_USERNAME.test(username)) return;

    // TODO: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å backend (–ø–æ–∑–∂–µ)
    // –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥ + –±—ã—Å—Ç—Ä—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫
    console.log("[Contacts] add by username:", username);

    btnAdd.disabled = true;
    helper.hidden = false;
    helper.textContent = `Invited: ${username}`;
    input.value = "";
    syncValidity();
    input.focus();
  }

  return root;
}